/*
 * Copyright (c) 2022 Thirty Meter Telescope International Observatory
 * SPDX-License-Identifier: Apache-2.0
 */

package csw.framework.deploy.containercmd.cli

import java.io.ByteArrayOutputStream
import java.nio.file.Paths

import org.scalatest.BeforeAndAfterEach
import org.scalatest
import org.scalatest.matchers.should.Matchers

class ArgsParserTest extends scalatest.funsuite.AnyFunSuite with Matchers with BeforeAndAfterEach {
  val inputFilePath = "/tmp/some/input/file"

  // Capture output/error generated by the parser, for cleaner test output. If interested, errCapture.toString will return capture errors.
  val outCapture = new ByteArrayOutputStream
  val errCapture = new ByteArrayOutputStream

  override protected def afterEach(): Unit = {
    outCapture.reset()
    errCapture.reset()
  }

  def silentParse(args: Array[String]): Option[Options] =
    Console.withOut(outCapture) {
      Console.withErr(errCapture) {
        new ArgsParser("container-cmd").parse(args.toList)
      }
    }

  test("should parse arguments when all arguments are provided | CSW-177") {
    val args                     = Array("--local", inputFilePath)
    val options: Option[Options] = silentParse(args)
    options should contain(Options(local = true, Some(Paths.get(inputFilePath))))
  }

  test("should parse arguments with default value of false when local option is not provided | CSW-177") {
    val args                     = Array(inputFilePath)
    val options: Option[Options] = silentParse(args)
    options should contain(Options(local = false, Some(Paths.get(inputFilePath))))
  }
}
